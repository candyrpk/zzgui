var rubyTracker=angular.module("rubyTracker",["ngCookies","ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/login"),e.state("login",{url:"/login",templateUrl:"app/components/login/login.page.html",controller:"LoginController",pageTitle:"Login"}).state("app",{url:"/app","abstract":!0,templateUrl:"app/components/mainContent/main.page.html",controller:"InitController"}).state("app.dashboard",{url:"/dashboard",templateUrl:"app/components/dashboard/dashboard.page.html",controller:"DashboardController",pageTitle:"Dashboard"}).state("app.register",{url:"/register",templateUrl:"app/components/register/register.page.html",controller:"RegisterController",pageTitle:"Register"})}]).run(["$rootScope","$http","$state","$stateParams","$location","$cookies",function(e,t,o,r,a,l){e.pageTitle=o.current.pageTitle,localStorage.getItem("globals")&&(t.defaults.headers.common.Authorization="Bearer "+localStorage.getItem("globals")),e.$on("$stateChangeStart",function(e,t,o,r,l){console.log(a.path());var n=$.inArray(t.name,["login"])===-1,g=localStorage.getItem("globals");n&&!g&&a.path("/login")})}]);

"use strict";angular.module("rubyTracker").factory("AuthFactory",["$http","$cookies","$rootScope","$timeout",function(e,o,t,r){var a={};return console.log("factory"),a.Login=function(o,t){e({method:"POST",url:"http://futureprotech-testingurl.rhcloud.com/api/v1/loginuser",data:$.param({username:o.username,password:o.password}),headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(e){e=e?{success:e.status,data:e.data}:{success:!1,message:"Username or password is incorrect"},t(e)})},a.SetCredentials=function(o,r,a){t.globals={currentUser:{username:o,token:a}},e.defaults.headers.common.Authorization="Bearer "+a,localStorage.setItem("globals",a)},a.ClearCredentials=function(){t.globals={},localStorage.setItem("globals",""),e.defaults.headers.common.Authorization="Bearer "},a}]);
angular.module("rubyTracker").controller("DashboardController",["$scope","$state","$location","AuthFactory",function(o,r,a,t){}]);

angular.module("rubyTracker").controller("LoginController",["$scope","$state","$location","AuthFactory",function(o,n,e,a){o.credentials={username:"",password:""},console.log("login"),o.authentication=function(o){a.Login(o,function(e){e.success?(a.SetCredentials(o.username,o.password,e.data),n.go("app.dashboard")):console.log("error in login")})}}]);
angular.module("rubyTracker").service("LoginService",["$http","$q",function(e,r){var t=r.defer();this.auth=function(r){return e.post("http://futureprotech-testingurl.rhcloud.com/loginuser",r).then(function(e){t.resolve(e)},function(e){t.reject(e)}),t.promise}}]);
angular.module("rubyTracker").controller("InitController",["$scope","$state","$location","AuthFactory",function(o,r,t,l){}]);
angular.module("rubyTracker").controller("RegisterController",["$scope","$state","$location","AuthFactory",function(o,r,t,e){}]);

//# sourceMappingURL=data:application/json;base64,
