var rubyTracker=angular.module("rubyTracker",["ngCookies","ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/login"),e.state("login",{url:"/login",templateUrl:"app/components/login/login.page.html",controller:"LoginController",pageTitle:"Login"}).state("app",{url:"/app","abstract":!0,templateUrl:"app/components/mainContent/main.page.html",controller:"InitController"}).state("app.dashboard",{url:"/dashboard",templateUrl:"app/components/dashboard/dashboard.page.html",controller:"DashboardController",pageTitle:"Dashboard"}).state("app.register",{url:"/register",templateUrl:"app/components/register/register.page.html",controller:"RegisterController",pageTitle:"Register"})}]).run(["$rootScope","$http","$state","$stateParams","$location","$cookies",function(e,t,o,r,a,l){e.$on("$stateChangeStart",function(t,o,r,l,n){e.pageTitle=o.pageTitle,console.log(a.path());var p=$.inArray(o.name,["login"])===-1,i=localStorage.getItem("globals");p&&!i&&a.path("/login")})}]);

"use strict";angular.module("rubyTracker").factory("AuthFactory",["$http","$cookies","$rootScope","$timeout",function(e,t,o,r){var s={};return console.log("factory"),s.Login=function(t,o){e({method:"POST",url:"http://futureprotech-testingurl.rhcloud.com/api/v1/loginuser",data:$.param({username:t.username,password:t.password}),headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(e){e=e?{success:e.status,data:e.data}:{success:!1,message:"Username or password is incorrect"},o(e)})},s.SetCredentials=function(e,t,r){o.globals={currentUser:{username:e,token:r}},localStorage.setItem("globals",r)},s.ClearCredentials=function(){o.globals={},localStorage.setItem("globals","")},s}]);
angular.module("rubyTracker").controller("DashboardController",["$scope","$state","$location","AuthFactory",function(o,r,a,t){}]);

angular.module("rubyTracker").controller("LoginController",["$scope","$state","$location","AuthFactory",function(o,n,e,r){o.credentials={username:"",password:""},console.log("login"),o.authentication=function(o){r.Login(o,function(e){e.success?(r.SetCredentials(o.username,o.password,e.data),n.go("app.register")):console.log("error in login")})}}]);
angular.module("rubyTracker").service("LoginService",["$http","$q",function(e,r){var t=r.defer();this.auth=function(r){return e.post("http://futureprotech-testingurl.rhcloud.com/loginuser",r).then(function(e){t.resolve(e)},function(e){t.reject(e)}),t.promise}}]);
angular.module("rubyTracker").controller("InitController",["$scope","$state","$location","AuthFactory",function(o,t,l,n){o.logout=function(){n.ClearCredentials(),t.go("login")}}]);
angular.module("rubyTracker").controller("RegisterController",["$scope","$state","$location","RegisterService",function(e,n,o,r){function c(e){i()}e.user={vcUsername:"admin",entity:{iUserType:1,vcName:"Admin",dtDOB:"28/11/1989",vcAddress:"No. 50, sencond cross, Kargil Nagar, velrampet, puducherry.",iPlacement:1,iTimeSlot:1,iInstitute:3,email:["surendar28111989@gmail.com","surendar28ih@gmail.com"],phone:[{iPhoneType:1,vcPhoneNumber:"9715261938"},{iPhoneType:2,vcPhoneNumber:"9715261931"}],course:[5,6]}},e.register=function(e){r.register(e,function(e){e.success?console.log(e):console.log("error in login")})};var i=function(){r.getReferenceData().then(function(e){console.log(e)},function(e){console.log(e)})};c()}]);
angular.module("rubyTracker").service("RegisterService",["$http","$q",function(i,I){var l=I.defer();this.register=function(I){return i({method:"POST",url:"http://futureprotech-testingurl.rhcloud.com/api/v1/registeruser",data:$.param(I),headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:localStorage.getItem("globals")}}).then(function(i){l.resolve(i)},function(i){l.reject(i)}),l.promise},this.getReferenceData=function(){var I="Bearer "+localStorage.getItem("globals");return console.log(I),i.get("http://futureprotech-testingurl.rhcloud.com/api/v1/getreference",{headers:{authorization:"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpVXNlciI6MjksInZjVXNlcm5hbWUiOiJzdXJlbmRhciIsImVudGl0eSI6eyJpRW50aXR5IjoyMSwiaVVzZXIiOjI5LCJpVXNlclR5cGUiOjIsInZjTmFtZSI6IkFkbWluIiwiZHRET0IiOm51bGwsInZjQWRkcmVzcyI6Ik5vLiA1MCwgc2VuY29uZCBjcm9zcywgS2FyZ2lsIE5hZ2FyLCB2ZWxyYW1wZXQsIHB1ZHVjaGVycnkuIiwiaVBsYWNlbWVudCI6MSwiaVRpbWVTbG90IjoxLCJpSW5zdGl0dXRlIjozLCJpbnN0aXR1dGUiOnsiaVJlZmVyZW5jZSI6MywidmNUaXRsZSI6ImlIb3JzZSIsInZjRGVzY3JpcHRpb24iOiJpSG9yc2UgU29mdHdhcmUiLCJ2Y0NvZGUiOiJJNDAwMCIsImlSZWZlcm5jZVR5cGUiOjEsImluc3RpdHV0ZV90eXBlIjp7ImlSZWZlcmVuY2VUeXBlIjoxLCJ2Y05hbWUiOiJpbnN0aXR1dGUifX0sInVzZXJ0eXBlIjp7ImlVc2VyVHlwZSI6MiwidmNSb2xlIjoiTWFya2V0aW5nIiwidmNEZXNjcmlwdGlvbiI6Ik1hcmtldGluZyJ9LCJlbWFpbCI6W3siaUVtYWlsSWQiOjI1LCJ2Y0VtYWlsIjoic3VyZW5kYXIyODExODlAZ21haWwuY29tIiwiaUVudGl0eSI6MjF9XSwicGhvbmUiOlt7ImlQaG9uZSI6MzgsInZjUGhvbmVOdW1iZXIiOiI5NzE1MjYxOTM2IiwiaUNyZWF0ZWRCeSI6MjAsImlVcGRhdGVkQnkiOjIwLCJiU3RhdHVzIjp0cnVlLCJpRW50aXR5IjoyMSwiaVBob25lVHlwZSI6MX1dLCJjb3Vyc2VfbGlzdCI6W3siaUVudGl0eUNvdXJzZSI6MjcsImlDb3VzZUlkIjo1LCJpRW50aXR5IjoyMSwiY291cnNlIjp7ImlSZWZlcmVuY2UiOjUsInZjVGl0bGUiOiJDIiwidmNEZXNjcmlwdGlvbiI6IkMgUHJvZ3JhbWluZyIsInZjQ29kZSI6IkM1MDAxIiwiaVJlZmVybmNlVHlwZSI6MiwiY291cnNlX3R5cGUiOnsiaVJlZmVyZW5jZVR5cGUiOjIsInZjTmFtZSI6ImNvdXJzZSJ9fX0seyJpRW50aXR5Q291cnNlIjoyOCwiaUNvdXNlSWQiOjYsImlFbnRpdHkiOjIxLCJjb3Vyc2UiOnsiaVJlZmVyZW5jZSI6NiwidmNUaXRsZSI6IkMrKyIsInZjRGVzY3JpcHRpb24iOiJDKysgUHJvZ3JhbWluZyIsInZjQ29kZSI6IkM1MDAyIiwiaVJlZmVybmNlVHlwZSI6MiwiY291cnNlX3R5cGUiOnsiaVJlZmVyZW5jZVR5cGUiOjIsInZjTmFtZSI6ImNvdXJzZSJ9fX1dfSwiaWF0IjoxNDcxNzkwOTMzfQ.i9lpC2M528SjS4LmExcCGXt6ugoc7ZUeIUXdksiGtVY"}}).then(function(i){l.resolve(i)},function(i){l.reject(i)}),l.promise}}]);
//# sourceMappingURL=data:application/json;base64,
